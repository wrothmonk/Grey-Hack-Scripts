//Program for ssh-ing to a server set up with the bundled encode/decode.src
if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: connect [password]</b>")
//connection info, set at compile
secret = {"user":"","ip":"","port":22,"salt":""}

HEX = {} //hexadecimal conversion lookup table
for i in range(15)
  if i > 9 then //letters
    letter = char(i + 87)
    HEX[letter] = i
    HEX[i] = letter
  else //numbers
    HEX[str(i)] = i
    HEX[i] = str(i)
  end if
end for

//extended bitwise operators
bit = {}

bit.unsigned = function(x)
  if x < 0 then return x + 2^32
  return x
end function

bit.to_hex = function(val, length)
  val = bit.unsigned(val)
  output = []
  for i in range(length-1)
    output.push(HEX[val%16])
    val = floor(val/16)
  end for
  output.reverse
  return output.join("")
end function

//function that generates login token based on passwor, salt, and current date
login_token = function()
  //calculate extra salt based on time of run
  date = current_date
  time = date[-5:].split(":") //get hours & minutes
  date = date[:-6].split("-") //get day, month, & year
  more_salt = time[0].val + time[1].val //hour + minutes
  for i in date[:2] //month and day
    more_salt = more_salt + i.val - 1 //-1 to allow adding of zero, since day/months start at 1
  end for

  salt_val = 0
  for c in secret.salt
    salt_val = salt_val + HEX[c]
  end for
  // bring more_salt to 8 bits and scramble bits up a bit
  more_salt = bitwise("<<", more_salt, 1) + round(rnd(salt_val*date[2].val))
  more_salt = bitwise("^", more_salt, round(rnd(more_salt)*(2^8-1)))
  more_salt = bit.to_hex(more_salt, 2)
  token = ""
  for c in params[0]
    token = token + bit.to_hex(c.code, 2)
  end for
  token = token + secret.salt + more_salt
  return token
end function

//Connect
connection = get_shell.connect_service(secret.ip, secret.port, secret.user, login_token)
if typeof(connection) != "shell" then
  exit("<color=red>Error: " + str(connection))
else
  connection.start_terminal
end if
